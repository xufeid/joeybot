import { getLatestEnhancedNews, getEnhancedNewsByCoin, getEnhancedNewsByProject, getImportantEnhancedNews, formatEnhancedNewsForDisplay } from './newsStream.js';
import { sendUserMessage } from '../telegram.js';
const { supabase } = require('../supabase');
const { formatNewsForTelegram } = require('./newsPublisher');
const { sendTelegramMessage } = require('../telegram');

export async function handleNewsCommand(userId, command, args) {
  try {
    let news = [];
    let responseMessage = '';
    
    switch (command) {
      case 'latest':
        // Ëé∑ÂèñÊúÄÊñ∞Êñ∞Èóª
        news = await getLatestEnhancedNews(5);
        responseMessage = 'üì∞ ÊúÄÊñ∞Âä†ÂØÜË¥ßÂ∏ÅÊñ∞Èóª';
        break;
        
      case 'coin':
        // Êåâ‰ª£Â∏ÅËé∑ÂèñÊñ∞Èóª
        if (!args || args.length === 0) {
          return sendUserMessage('ËØ∑ÊåáÂÆö‰ª£Â∏ÅÁ¨¶Âè∑Ôºå‰æãÂ¶ÇÔºö/news coin BTC', userId);
        }
        const coinSymbol = args[0].toUpperCase();
        news = await getEnhancedNewsByCoin(coinSymbol, 5);
        responseMessage = `üì∞ ÂÖ≥‰∫é ${coinSymbol} ÁöÑÊúÄÊñ∞Êñ∞Èóª`;
        break;
        
      case 'project':
        // ÊåâÈ°πÁõÆËé∑ÂèñÊñ∞Èóª
        if (!args || args.length === 0) {
          return sendUserMessage('ËØ∑ÊåáÂÆöÈ°πÁõÆÂêçÁß∞Ôºå‰æãÂ¶ÇÔºö/news project Ethereum', userId);
        }
        const projectName = args.join(' ');
        news = await getEnhancedNewsByProject(projectName, 5);
        responseMessage = `üì∞ ÂÖ≥‰∫é ${projectName} ÁöÑÊúÄÊñ∞Êñ∞Èóª`;
        break;
        
      case 'important':
        // Ëé∑ÂèñÈáçË¶ÅÊñ∞Èóª
        news = await getImportantEnhancedNews(7, 5);
        responseMessage = 'üì∞ ÈáçË¶ÅÂä†ÂØÜË¥ßÂ∏ÅÊñ∞Èóª';
        break;
        
      default:
        return sendUserMessage('Êú™Áü•ÁöÑÊñ∞ÈóªÂëΩ‰ª§„ÄÇÂèØÁî®ÂëΩ‰ª§Ôºölatest, coin, project, important', userId);
    }
    
    if (news.length === 0) {
      return sendUserMessage('Ê≤°ÊúâÊâæÂà∞Áõ∏ÂÖ≥Êñ∞Èóª„ÄÇ', userId);
    }
    
    // ÂèëÈÄÅÊñ∞ÈóªÊëòË¶Å
    await sendUserMessage(`${responseMessage}\n\n${formatNewsListForDisplay(news)}`, userId);
    
    // ËØ¢ÈóÆÁî®Êà∑ÊòØÂê¶ÈúÄË¶ÅÊü•ÁúãËØ¶ÁªÜÂÜÖÂÆπ
    await sendUserMessage('ËæìÂÖ•Êñ∞ÈóªIDÊü•ÁúãËØ¶ÁªÜÂÜÖÂÆπÔºå‰æãÂ¶ÇÔºö/news view 123', userId);
    
  } catch (error) {
    console.error('Error handling news command:', error);
    await sendUserMessage('Â§ÑÁêÜÊñ∞ÈóªÂëΩ‰ª§Êó∂Âá∫ÈîôÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ', userId);
  }
}

export async function handleViewNewsCommand(userId, newsId) {
  try {
    // ‰ªéÊï∞ÊçÆÂ∫ìËé∑ÂèñÊñ∞ÈóªËØ¶ÊÉÖ
    const { data: news, error } = await supabase
      .from('news')
      .select('*')
      .eq('id', newsId)
      .eq('is_enhanced', true)
      .single();
      
    if (error || !news) {
      return sendUserMessage('Êú™ÊâæÂà∞ÊåáÂÆöIDÁöÑÊñ∞Èóª„ÄÇ', userId);
    }
    
    // Ê†ºÂºèÂåñÊñ∞ÈóªËØ¶ÊÉÖ
    const formattedNews = formatNewsForTelegram(news);
    
    // ÂèëÈÄÅËØ¶ÁªÜÂÜÖÂÆπ
    await sendUserMessage(formattedNews, userId);
    
  } catch (error) {
    console.error('Error handling view news command:', error);
    await sendUserMessage('Êü•ÁúãÊñ∞ÈóªËØ¶ÊÉÖÊó∂Âá∫ÈîôÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ', userId);
  }
}

// Ê†ºÂºèÂåñÊñ∞ÈóªÂàóË°®Áî®‰∫éÊòæÁ§∫
function formatNewsListForDisplay(newsList) {
  return newsList.map((news, index) => {
    const formattedNews = formatEnhancedNewsForDisplay(news);
    return `${index + 1}. <b>[ID: ${formattedNews.id}] ${formattedNews.title}</b>\n` +
           `   Áõ∏ÂÖ≥‰ª£Â∏Å: ${formattedNews.coins.join(', ') || 'Êó†'}\n` +
           `   Êó∂Èó¥: ${new Date(formattedNews.timestamp * 1000).toLocaleString()}\n`;
  }).join('\n');
}